@page "/Playlists"
@using music_manager_starter.Shared

@inject HttpClient Http

@code {
    private List<Playlist> playlists;
    private List<Song> availableSongs = new List<Song>();
    private Playlist newPlaylist = new Playlist();

    private string message;
    private string newSong;

    protected override async Task OnInitializedAsync()
    {
        playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/playlists");
        availableSongs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
        newPlaylist.Songs = new List<string>();
    }


    //Add or remove a song to the list of selected songs for adding to a playlist
    private void ToggleSelection(Song song)
    {
        if (newPlaylist.Songs.Contains(song.Title))
        {
            newPlaylist.Songs.Remove(song.Title);
        }
        else
        {
            newPlaylist.Songs.Add(song.Title);
        }

    }

    //Handle submitting the playlist to the endpoint
    private async Task HandlePlaylistSubmit()
    {       
        try
        {
            var response = await Http.PostAsJsonAsync("api/playlists", newPlaylist);
            if (response.IsSuccessStatusCode)
            {
                message = "Playlist added successfully!";
                newPlaylist = new Playlist();
                newPlaylist.Songs = new List<string>();
                playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/playlists");
            }
            else
            {
                message = "Error adding playlist. Please try again.";
            }
        }
        catch (Exception e)
        {
            message = "Something went wrong while adding a playlist!";
        }
    }

    //Handle deleting a playlist
    private async Task HandlePlaylistDelete(Guid playlistId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/playlists/{playlistId}");
            if (response.IsSuccessStatusCode)
            {
                message = "Successfully deleted playlist.";
                playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/playlists");
                newPlaylist = new Playlist();
                newPlaylist.Songs = new List<string>();
            }
            else
            {
                message = "Bad request.  Please try again.";
            }
        }
        catch
        {
            message = "Something went wrong while deleting a playlist!";
        }
    }

    //Handle removing a song from the provided playlist
    private async Task HandleSongRemoval(Guid playlistId, string songName)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/playlists/{playlistId}/deleteSong/{songName}");
            if (response.IsSuccessStatusCode)
            {
                message = "Successfully removed song from playlist.";
                playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/playlists");
            }
            else
            {
                message = "Error while removing song from playlist.  Please try again.";
            }
        }
        catch
        {
            message = "Something went wrong while removing a song from a playlist!";
        }
    }

    //Handle adding a new song to a playlist
    private async Task HandleAddNewSong(Guid playlistId, string newSongName)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/playlists/{playlistId}/addSong/{newSongName}", newSongName);
            if (response.IsSuccessStatusCode)
            {
                message = "Successfully added song to the playlist.";
                playlists = await Http.GetFromJsonAsync<List<Playlist>>("api/playlists");
            }
            else
            {
                message = "Error while adding song to the playlist.";
            }
        }
        catch
        {
            message = "Something went wrong will adding a song to a playlist!";
        }
    }
    
}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center">
    <h2 class="text-3xl font-bold text-white mb-8 text-center">Playlists</h2>
    <EditForm class="p-4" Model="newPlaylist" OnValidSubmit="HandlePlaylistSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label class="block text-gray-200">Playlist Name</label>
            <InputText @bind-Value="newPlaylist.Name" class="mt-1 block w-full p-2 border rounded" />
        </div>
        @foreach (var song in availableSongs)
        {
            <div class="text-gray-200" >
                <input type="checkbox" @onchange="() => ToggleSelection(song)" /> @song.Title
            </div>
        }

        <button type="submit" class="bg-purple-600 px-4 py-2 text-white hover:scale-105 rounded">
            Add new playlist
        </button>
    </EditForm>

    <div class="px-3 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        @if (playlists != null && playlists.Count > 0)
        {
            @foreach (var playlist in playlists)
            {
                <div class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform">
                    <h3 class="text-xl font-semibold mb-2">@playlist.Name</h3>
                    @if (playlist.Songs != null && playlist.Songs.Count > 0)
                    {
                        @for (int i = 0; i < playlist.Songs.Count; i++)
                        {
                            <p class="text-md">@(i+1). <span class="font-light">@playlist.Songs[i]</span></p>
                            <button @onclick="() => HandleSongRemoval(playlist.Id, playlist.Songs[i-1])" class="bg-danger px-1 py-1 text-white hover:scale-105 rounded">Remove</button>
                        }
                    }
                    else
                    {
                        <div class="col-span-1 text-center text-gray-400">No songs found in this playlist.</div>
                    }

                    <div class="mb-4">
                        <label class="block text-gray-200">New Song Name</label>
                        <InputText @bind-Value="newSong" class="mt-1 block w-full p-2 border rounded text-black" />
                    </div>

                    <button @onclick="() => HandleAddNewSong(playlist.Id, newSong)" class="bg-purple-600 px-4 py-2 text-white hover:scale-105 rounded">
                        Add this song
                    </button>
                    
                    <button @onclick="() => HandlePlaylistDelete(playlist.Id)" class="bg-danger px-2 py-2 block mt-4 text-white hover:scale-105 rounded">
                        Delete playlist
                    </button>
                </div>
            }
        }
        else
        {
            <div class="col-span-1 text-center text-gray-400">No playlists found.</div>
        }
        @if (message != null)
        {
            <p class="mt-4 text-green-500">@message</p>
        }
    </div>
</div>

<style>
    .bg-pattern {
        background: linear-gradient( rgba(31, 41, 55, 0.7), rgba(31, 41, 55, 0.7) ), url('dalle.webp');
        background-size: cover;
        background-position: center;
        font-family: 'Rajdhani', sans-serif;
    }



    .glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        position: relative;
        overflow: hidden;
    }

        .glass:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            pointer-events: none;
        }
</style>